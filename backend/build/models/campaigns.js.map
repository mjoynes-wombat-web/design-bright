{"version":3,"sources":["../../src/models/campaigns.js"],"names":["db","gatherCampaignImages","rawCampaignImages","imageData","forEach","img_id","content_id","content_position","image_type","src","alt","imgElement","imgId","contentId","contentPosition","imageType","push","gatherCampaignText","rawTextData","textData","text_id","text_type","text","textElement","textId","textType","getCampaignContent","campaignId","success","error","campaigns","find","where","include","model","campaignContent","campaign_id","content_status","campaignText","campaignImages","then","results","rawCampaignData","rawContentData","campaign_contents","campaignInfo","name","length","fundingNeeded","donationsMade","startDate","endDate","contentInfo","contentStatus","createdDate","created_date","updatedDate","updatedAt","campaign_texts","campaign_images","catch","findErr","getNonprofitsCampaigns","nonprofitId","findAll","findResults","Array","result","dataValues","launchCampaign","update","Date","updateResults","updateErr","stopCampaign","$ne"],"mappings":"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","file":"campaigns.js","sourcesContent":["import * as db from './db';\n\nconst gatherCampaignImages = (rawCampaignImages) => {\n  const imageData = [];\n  rawCampaignImages.forEach((\n    {\n      img_id,\n      content_id,\n      content_position,\n      image_type,\n      src,\n      alt,\n    },\n  ) => {\n    const imgElement = {\n      imgId: img_id,\n      contentId: content_id,\n      contentPosition: content_position,\n      imageType: image_type,\n      src,\n      alt,\n    };\n    imageData.push(imgElement);\n  });\n  return imageData;\n};\n\nconst gatherCampaignText = (rawTextData) => {\n  const textData = [];\n  rawTextData.forEach((\n    {\n      text_id,\n      content_id,\n      content_position,\n      text_type,\n      text,\n    },\n  ) => {\n    const textElement = {\n      textId: text_id,\n      contentId: content_id,\n      contentPosition: content_position,\n      textType: text_type,\n      text,\n    };\n    textData.push(textElement);\n  });\n  return textData;\n};\n\nexport const getCampaignContent = (campaignId, success, error) => {\n  db.campaigns.find({\n    where: { campaignId },\n    include: [\n      {\n        model: db.campaignContent,\n        where: {\n          campaign_id: campaignId,\n          content_status: 'current',\n        },\n        include: [\n          {\n            model: db.campaignText,\n          },\n          {\n            model: db.campaignImages,\n          },\n        ],\n      },\n    ],\n  })\n    .then((results) => {\n      const rawCampaignData = results;\n      const rawContentData = results.campaign_contents[0];\n\n      const campaignInfo = {\n        campaignId: rawCampaignData.campaignId,\n        name: rawCampaignData.name,\n        length: rawCampaignData.length,\n        fundingNeeded: rawCampaignData.fundingNeeded,\n        donationsMade: rawCampaignData.donationsMade,\n        startDate: rawCampaignData.startDate,\n        endDate: rawCampaignData.endDate,\n      };\n\n      const contentInfo = {\n        contentId: rawContentData.content_id,\n        campaignId: rawContentData.campaign_id,\n        contentStatus: rawContentData.content_status,\n        createdDate: rawContentData.created_date,\n        updatedDate: rawContentData.updatedAt,\n      };\n\n      const campaignText = gatherCampaignText(rawContentData.campaign_texts);\n      const campaignImages = gatherCampaignImages(rawContentData.campaign_images);\n\n      success({\n        campaignInfo,\n        contentInfo,\n        campaignText,\n        campaignImages,\n      });\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const getNonprofitsCampaigns = (nonprofitId, success, error) => {\n  db.campaigns.findAll({\n    where: { nonprofitId },\n  })\n    .then((findResults) => {\n      const campaigns = [];\n\n      Array.forEach(findResults, (result) => {\n        campaigns.push(result.dataValues);\n      });\n\n      success(campaigns);\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const launchCampaign = (campaignId, nonprofitId, success, error) => {\n  db.campaigns.update(\n    { startDate: new Date() },\n    { where: { campaignId, nonprofitId, startDate: null, endDate: null } },\n  )\n    .then(updateResults => success(updateResults))\n    .catch(updateErr => error(updateErr));\n};\n\nexport const stopCampaign = (campaignId, nonprofitId, success, error) => {\n  db.campaigns.update(\n    { endDate: new Date() },\n    { where: {\n      campaignId,\n      nonprofitId,\n      startDate: {\n        $ne: null,\n      },\n      endDate: null } },\n  )\n    .then(updateResults => success(updateResults))\n    .catch(updateErr => error(updateErr));\n};\n"]}