{"version":3,"sources":["../../src/models/campaigns.js"],"names":["db","getCampaignContent","campaignId","success","error","campaigns","find","where","include","model","campaignContent","contentStatus","campaignText","campaignImages","then","results","name","length","fundingNeeded","donationsMade","startDate","endDate","contentId","createdDate","updatedAt","campaignTexts","campaignContents","campaignInfo","contentInfo","campaignTextBlocks","reduce","parsedCampaignText","block","parsedBlock","textId","position","kind","isVoid","type","nodes","JSON","parse","createdAt","push","campaignImagesBlocks","cleanedImageData","cleanedBlock","imgId","data","alt","src","imageType","unsortedCampaignContent","sort","a","b","catch","findErr","getNonprofitsCampaigns","nonprofitId","findAll","findResults","i","dataValues","launchCampaign","update","Date","updateResults","updateErr","stopCampaign","$ne","updateCampaign","createCampaign","content","create","newCampaign","newContent","rawContent","document","blocks","formattedBlocks","index","newBlocks","formattedBlock","includes","stringify","text","images","bulkCreate","message","createImagesErr","createTextErr","createContentErr","createCampaignErr"],"mappings":"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","file":"campaigns.js","sourcesContent":["import * as db from './db';\n\nexport const getCampaignContent = (campaignId, success, error) => {\n  db.campaigns.find({\n    where: { campaignId },\n    include: [\n      {\n        model: db.campaignContent,\n        where: {\n          campaignId,\n          contentStatus: 'current',\n        },\n        include: [\n          {\n            model: db.campaignText,\n          },\n          {\n            model: db.campaignImages,\n          },\n        ],\n      },\n    ],\n  })\n    .then((results) => {\n      const { name, length, fundingNeeded, donationsMade, startDate, endDate } = results;\n      const {\n        contentId,\n        contentStatus,\n        createdDate,\n        updatedAt,\n        campaignTexts,\n        campaignImages } = results.campaignContents[0];\n      const campaignInfo = {\n        campaignId,\n        name,\n        length,\n        fundingNeeded,\n        donationsMade,\n        startDate,\n        endDate,\n      };\n\n      const contentInfo = {\n        contentId,\n        campaignId,\n        contentStatus,\n        createdDate,\n        updatedAt,\n      };\n\n      const campaignTextBlocks = campaignTexts.reduce(\n        (parsedCampaignText, block) => {\n          const parsedBlock = {\n            textId: block.textId,\n            contentId: block.contentId,\n            position: block.position,\n            kind: block.kind,\n            isVoid: block.isVoid,\n            type: block.type,\n            nodes: JSON.parse(block.nodes),\n            createdAt: block.createdAt,\n            updatedAt: block.updatedAt,\n          };\n          parsedCampaignText.push(parsedBlock);\n          return parsedCampaignText;\n        },\n        [],\n      );\n\n      const campaignImagesBlocks = campaignImages.reduce(\n        (cleanedImageData, block) => {\n          const cleanedBlock = {\n            imgId: block.imgId,\n            contentId: block.contentId,\n            position: block.position,\n            kind: block.kind,\n            isVoid: block.isVoid,\n            type: block.type,\n            data: {\n              alt: block.alt,\n              src: block.src,\n              imageType: block.imageType,\n            },\n            createdAt: block.createdAt,\n            updatedAt: block.updatedAt,\n          };\n\n          cleanedImageData.push(cleanedBlock);\n          return cleanedImageData;\n        },\n        [],\n      );\n      const unsortedCampaignContent = [\n        ...campaignImagesBlocks,\n        ...campaignTextBlocks,\n      ];\n      const campaignContent = unsortedCampaignContent.sort(\n        (a, b) => a.position - b.position);\n      success({\n        campaignInfo,\n        contentInfo,\n        campaignContent,\n      });\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const getNonprofitsCampaigns = (nonprofitId, success, error) => {\n  db.campaigns.findAll({\n    where: { nonprofitId },\n  })\n    .then((findResults) => {\n      const campaigns = [];\n      for (let i = 0; i < findResults.length; i += 1) {\n        campaigns.push(findResults[i].dataValues);\n      }\n      success(campaigns);\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const launchCampaign = (campaignId, nonprofitId, success, error) => {\n  db.campaigns.update(\n    { startDate: new Date() },\n    { where: { campaignId, nonprofitId, startDate: null, endDate: null } },\n  )\n    .then(updateResults => success(updateResults))\n    .catch(updateErr => error(updateErr));\n};\n\nexport const stopCampaign = (campaignId, nonprofitId, success, error) => {\n  db.campaigns.update(\n    { endDate: new Date() },\n    {\n      where: {\n        campaignId,\n        nonprofitId,\n        startDate: {\n          $ne: null,\n        },\n        endDate: null,\n      },\n    },\n  )\n    .then(updateResults => success(updateResults))\n    .catch(updateErr => error(updateErr));\n};\n\nexport const updateCampaign = () => {\n  // db.campaignContent.update(\n  //   { status: 'previous' },\n  //   { where: campaignId },\n  // )\n};\n\nexport const createCampaign = (\n  nonprofitId,\n  { name, fundingNeeded, length, content },\n  success,\n  error) => {\n  db.campaigns.create(\n    {\n      nonprofitId,\n      name,\n      length,\n      fundingNeeded,\n    },\n  )\n    .then((newCampaign) => {\n      const { campaignId } = newCampaign;\n      db.campaignContent.create(\n        {\n          campaignId,\n          contentStatus: 'current',\n          createdDate: new Date(),\n        },\n      )\n        .then((newContent) => {\n          const contentId = newContent.contentId;\n          const rawContent = content.document.nodes;\n\n          const blocks = rawContent.reduce((formattedBlocks, block, index) => {\n            const newBlocks = formattedBlocks;\n            const formattedBlock = {\n              contentId,\n              position: index + 1,\n              kind: block.kind,\n              isVoid: block.isVoid,\n              type: block.type,\n            };\n\n            if (['paragraph', 'header'].includes(block.type)) {\n              formattedBlock.nodes = JSON.stringify(block.nodes);\n              newBlocks.text.push(formattedBlock);\n              return newBlocks;\n            } else if (block.type === 'image') {\n              formattedBlock.alt = block.data.alt;\n              formattedBlock.src = block.data.src;\n              formattedBlock.imageType = block.data.imageType;\n              newBlocks.images.push(formattedBlock);\n              return newBlocks;\n            }\n            return newBlocks;\n          },\n          {\n            text: [],\n            images: [],\n          },\n          );\n          db.campaignText.bulkCreate(\n            blocks.text,\n          )\n            .then(() => {\n              db.campaignImages.bulkCreate(\n                blocks.images,\n              )\n                .then(() => success({ message: `The campaign with the id ${campaignId} was successfully created.`, campaignId }))\n                .catch(createImagesErr => error({ message: 'There was an error creating the image content.', error: createImagesErr }));\n            })\n            .catch(createTextErr => error({ message: 'There was an error creating the text content.', error: createTextErr }));\n        })\n        .catch(createContentErr => error({ message: 'There was an error creating the content information.', error: createContentErr }));\n    })\n    .catch(createCampaignErr => error({ message: 'There was an error creating the campaign information.', error: createCampaignErr }));\n};\n"]}