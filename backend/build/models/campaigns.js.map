{"version":3,"sources":["../../src/models/campaigns.js"],"names":["db","gatherCampaignImages","rawCampaignImages","imageData","forEach","imgId","contentId","contentPosition","imageType","src","alt","imgElement","push","gatherCampaignText","rawTextData","textData","textId","textType","text","textElement","getCampaignContent","campaignId","success","error","campaigns","find","where","include","model","campaignContent","contentStatus","campaignText2","campaignImages2","then","results","name","length","fundingNeeded","donationsMade","startDate","endDate","createdDate","updatedAt","campaignText2s","campaignImages2s","campaignContents","campaignInfo","contentInfo","campaignText","reduce","parsedCampaignText","block","parsedBlock","position","kind","isVoid","type","nodes","JSON","parse","createdAt","campaignImages","cleanedImageData","cleanedBlock","data","unsortedCampaignContent","sort","a","b","catch","findErr","getNonprofitsCampaigns","nonprofitId","findAll","findResults","i","dataValues","launchCampaign","update","Date","updateResults","updateErr","stopCampaign","$ne","updateCampaign","createCampaign","content","create","newCampaign","newContent","rawContent","document","blocks","formattedBlocks","index","newBlocks","formattedBlock","includes","stringify","images","bulkCreate","message","createImagesErr","createTextErr","createContentErr","createCampaignErr"],"mappings":"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","file":"campaigns.js","sourcesContent":["import * as db from './db';\n\nconst gatherCampaignImages = (rawCampaignImages) => {\n  const imageData = [];\n  rawCampaignImages.forEach((\n    {\n      imgId,\n      contentId,\n      contentPosition,\n      imageType,\n      src,\n      alt,\n    },\n  ) => {\n    const imgElement = {\n      imgId,\n      contentId,\n      contentPosition,\n      imageType,\n      src,\n      alt,\n    };\n    imageData.push(imgElement);\n  });\n  return imageData;\n};\n\nconst gatherCampaignText = (rawTextData) => {\n  const textData = [];\n  rawTextData.forEach((\n    {\n      textId,\n      contentId,\n      contentPosition,\n      textType,\n      text,\n    },\n  ) => {\n    const textElement = {\n      textId,\n      contentId,\n      contentPosition,\n      textType,\n      text,\n    };\n    textData.push(textElement);\n  });\n  return textData;\n};\n\nexport const getCampaignContent = (campaignId, success, error) => {\n  db.campaigns.find({\n    where: { campaignId },\n    include: [\n      {\n        model: db.campaignContent,\n        where: {\n          campaignId,\n          contentStatus: 'current',\n        },\n        include: [\n          {\n            model: db.campaignText2,\n          },\n          {\n            model: db.campaignImages2,\n          },\n        ],\n      },\n    ],\n  })\n    .then((results) => {\n      const { name, length, fundingNeeded, donationsMade, startDate, endDate } = results;\n      const { contentId, contentStatus, createdDate, updatedAt, campaignText2s, campaignImages2s } = results.campaignContents[0];\n      const campaignInfo = {\n        campaignId,\n        name,\n        length,\n        fundingNeeded,\n        donationsMade,\n        startDate,\n        endDate,\n      };\n\n      const contentInfo = {\n        contentId,\n        campaignId,\n        contentStatus,\n        createdDate,\n        updatedAt,\n      };\n\n      const campaignText = campaignText2s.reduce(\n        (parsedCampaignText, block) => {\n          const parsedBlock = {\n            textId: block.textId,\n            contentId: block.contentId,\n            position: block.position,\n            kind: block.kind,\n            isVoid: block.isVoid,\n            type: block.type,\n            nodes:  JSON.parse(block.nodes),\n            createdAt: block.createdAt,\n            updatedAt: block.updatedAt,\n          };\n          parsedCampaignText.push(parsedBlock);\n          return parsedCampaignText;\n        },\n        [],\n      );\n\n      const campaignImages = campaignImages2s.reduce(\n        (cleanedImageData, block) => {\n          const cleanedBlock = {\n            imgId: block.imgId,\n            contentId: block.contentId,\n            position: block.position,\n            kind: block.kind,\n            isVoid: block.isVoid,\n            type: block.type,\n            data: {\n              alt: block.alt,\n              src: block.src,\n              imageType: block.imageType,\n            },\n            createdAt: block.createdAt,\n            updatedAt: block.updatedAt,\n          };\n\n          cleanedImageData.push(cleanedBlock);\n          return cleanedImageData;\n        },\n        [],\n      );\n      const unsortedCampaignContent = [\n        ...campaignImages,\n        ...campaignText,\n      ];\n      \n      const campaignContent = unsortedCampaignContent.sort(\n        (a, b) => a.position - b.position);\n      success({\n        campaignInfo,\n        contentInfo,\n        campaignContent,\n      });\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const getNonprofitsCampaigns = (nonprofitId, success, error) => {\n  db.campaigns.findAll({\n    where: { nonprofitId },\n  })\n    .then((findResults) => {\n      const campaigns = [];\n      for (let i = 0; i < findResults.length; i += 1) {\n        campaigns.push(findResults[i].dataValues);\n      }\n      success(campaigns);\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const launchCampaign = (campaignId, nonprofitId, success, error) => {\n  db.campaigns.update(\n    { startDate: new Date() },\n    { where: { campaignId, nonprofitId, startDate: null, endDate: null } },\n  )\n    .then(updateResults => success(updateResults))\n    .catch(updateErr => error(updateErr));\n};\n\nexport const stopCampaign = (campaignId, nonprofitId, success, error) => {\n  db.campaigns.update(\n    { endDate: new Date() },\n    {\n      where: {\n        campaignId,\n        nonprofitId,\n        startDate: {\n          $ne: null,\n        },\n        endDate: null,\n      },\n    },\n  )\n    .then(updateResults => success(updateResults))\n    .catch(updateErr => error(updateErr));\n};\n\nexport const updateCampaign = () => {\n  // db.campaignContent.update(\n  //   { status: 'previous' },\n  //   { where: campaignId },\n  // )\n};\n\nexport const createCampaign = (\n  nonprofitId,\n  { name, fundingNeeded, length, content },\n  success,\n  error) => {\n  db.campaigns.create(\n    {\n      nonprofitId,\n      name,\n      length,\n      fundingNeeded,\n    },\n  )\n    .then((newCampaign) => {\n      const { campaignId } = newCampaign;\n      db.campaignContent.create(\n        {\n          campaignId,\n          contentStatus: 'current',\n          createdDate: new Date(),\n        },\n      )\n        .then((newContent) => {\n          const contentId = newContent.contentId;\n          const rawContent = content.document.nodes;\n\n          const blocks = rawContent.reduce((formattedBlocks, block, index) => {\n            const newBlocks = formattedBlocks;\n            const formattedBlock = {\n              contentId,\n              position: index + 1,\n              kind: block.kind,\n              isVoid: block.isVoid,\n              type: block.type,\n            };\n\n            if (['paragraph', 'header'].includes(block.type)) {\n              formattedBlock.nodes = JSON.stringify(block.nodes);\n              newBlocks.text.push(formattedBlock);\n              return newBlocks;\n            } else if (block.type === 'image') {\n              formattedBlock.alt = block.data.alt;\n              formattedBlock.src = block.data.src;\n              formattedBlock.imageType = block.data.imageType;\n              newBlocks.images.push(formattedBlock);\n              return newBlocks;\n            }\n            return newBlocks;\n          },\n          {\n            text: [],\n            images: [],\n          },\n          );\n          db.campaignText2.bulkCreate(\n            blocks.text,\n          )\n            .then(() => {\n              db.campaignImages2.bulkCreate(\n                blocks.images,\n              )\n                .then(() => success({ message: `The campaign with the id ${campaignId} was successfully created.`, campaignId }))\n                .catch(createImagesErr => error({ message: 'There was an error creating the image content.', error: createImagesErr }));\n            })\n            .catch(createTextErr => error({ message: 'There was an error creating the text content.', error: createTextErr }));\n        })\n        .catch(createContentErr => error({ message: 'There was an error creating the content information.', error: createContentErr }));\n    })\n    .catch(createCampaignErr => error({ message: 'There was an error creating the campaign information.', error: createCampaignErr }));\n};\n"]}