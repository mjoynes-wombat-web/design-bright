{"version":3,"sources":["../../src/models/db.js"],"names":["DB_NAME","DB_USER","DB_PASS","DB_HOST","DB_SCHEMA","DB_PORT","config","parsed","sequelize","host","dialect","port","pool","max","min","idle","logging","dialectOptions","ssl","nonProfits","define","nonprofitId","type","INTEGER","allowNull","primaryKey","autoIncrement","field","name","STRING","address","city","state","zip","ein","unique","tableName","campaigns","campaignId","length","fundingNeeded","DECIMAL","donationsMade","startDate","DATE","endDate","campaignContent","content_id","campaign_id","content_status","created_date","createdAt","updatedAt","campaignText","text_id","content_position","text_type","text","TEXT","campaignImages","img_id","image_type","src","alt","advisors","advisorId","firstName","lastName","email","position","yearsExperience","advisorStatus","hasMany","foreignKey","sync"],"mappings":"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","file":"db.js","sourcesContent":["import Sequelize from 'sequelize';\nimport dotenv from 'dotenv';\n\nconst { DB_NAME, DB_USER, DB_PASS, DB_HOST, DB_SCHEMA, DB_PORT } = dotenv.config().parsed;\n\nexport const sequelize = new Sequelize(\n  DB_NAME,\n  DB_USER,\n  DB_PASS,\n  {\n    host: DB_HOST,\n    dialect: DB_SCHEMA,\n    port: DB_PORT,\n    pool: {\n      max: 5,\n      min: 0,\n      idle: 10000,\n    },\n    logging: false,\n    dialectOptions: {\n      ssl: 0,\n    },\n  },\n);\n\nexport const nonProfits = sequelize.define(\n  'nonprofits',\n  {\n    nonprofitId: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n      field: 'nonprofit_id',\n    },\n    name: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n      field: 'name',\n    },\n    address: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n      field: 'address',\n    },\n    city: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n      field: 'city',\n    },\n    state: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n      field: 'state',\n    },\n    zip: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      field: 'zip',\n    },\n    ein: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      unique: true,\n      field: 'ein',\n    },\n  }, {\n    tableName: 'nonprofits',\n  },\n);\n\nexport const campaigns = sequelize.define(\n  'campaigns',\n  {\n    campaignId: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n      field: 'campaign_id',\n    },\n    name: {\n      type: Sequelize.STRING(100),\n      allowNull: false,\n      unique: true,\n      field: 'name',\n    },\n    nonprofitId: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      field: 'nonprofit_id',\n    },\n    length: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      field: 'length',\n    },\n    fundingNeeded: {\n      type: Sequelize.DECIMAL,\n      allowNull: false,\n      field: 'funding_needed',\n    },\n    donationsMade: {\n      type: Sequelize.DECIMAL,\n      allowNull: true,\n      field: 'donations_made',\n    },\n    startDate: {\n      type: Sequelize.DATE,\n      allowNull: true,\n      field: 'start_date',\n    },\n    endDate: {\n      type: Sequelize.DATE,\n      allowNull: true,\n      field: 'end_date',\n    },\n  },\n  {\n    tableName: 'campaigns',\n  },\n);\n\nexport const campaignContent = sequelize.define(\n  'campaign_content',\n  {\n    content_id: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    campaign_id: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n    },\n    content_status: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n    },\n    created_date: {\n      type: Sequelize.DATE,\n      allowNull: false,\n    },\n    createdAt: {\n      type: Sequelize.DATE,\n      allowNull: false,\n    },\n    updatedAt: {\n      type: Sequelize.DATE,\n      allowNull: false,\n    },\n  },\n  {\n    tableName: 'campaign_content',\n  },\n);\n\nexport const campaignText = sequelize.define(\n  'campaign_text',\n  {\n    text_id: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    content_id: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n    },\n    content_position: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n    },\n    text_type: {\n      type: Sequelize.STRING(45),\n      allowNull: false,\n    },\n    text: {\n      type: Sequelize.TEXT,\n      allowNull: false,\n    },\n    createdAt: {\n      type: Sequelize.DATE,\n      allowNull: false,\n    },\n    updatedAt: {\n      type: Sequelize.DATE,\n      allowNull: false,\n    },\n  },\n  {\n    tableName: 'campaign_text',\n  },\n);\n\nexport const campaignImages = sequelize.define(\n  'campaign_images',\n  {\n    img_id: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    content_id: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n    },\n    content_position: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n    },\n    image_type: {\n      type: Sequelize.STRING(45),\n      allowNull: false,\n    },\n    src: {\n      type: Sequelize.STRING(99),\n      allowNull: false,\n    },\n    alt: {\n      type: Sequelize.STRING(45),\n      allowNull: false,\n    },\n    createdAt: {\n      type: Sequelize.DATE,\n      allowNull: false,\n    },\n    updatedAt: {\n      type: Sequelize.DATE,\n      allowNull: false,\n    },\n  }, {\n    tableName: 'campaign_images',\n  },\n);\n\nexport const advisors = sequelize.define(\n  'advisors',\n  {\n    advisorId: {\n      type: Sequelize.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n      field: 'advisor_id',\n    },\n    firstName: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n      field: 'first_name',\n    },\n    lastName: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n      field: 'last_name',\n    },\n    email: {\n      type: Sequelize.STRING(100),\n      allowNull: false,\n      unique: true,\n      field: 'email',\n    },\n    position: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n      field: 'position',\n    },\n    yearsExperience: {\n      type: Sequelize.DECIMAL,\n      allowNull: false,\n      field: 'years_experience',\n    },\n    advisorStatus: {\n      type: Sequelize.STRING(75),\n      allowNull: false,\n      field: 'advisor_status',\n    },\n    nonprofitId: {\n      type: Sequelize.INTEGER(11),\n      allowNull: true,\n      unique: true,\n      field: 'nonprofit_id',\n    },\n  },\n  {\n    tableName: 'advisors',\n  },\n);\n\nnonProfits.hasMany(campaigns, { foreignKey: 'nonprofit_id' });\ncampaigns.hasMany(campaignContent, { foreignKey: 'campaign_id' });\ncampaignContent.hasMany(campaignImages, { foreignKey: 'content_id' });\ncampaignContent.hasMany(campaignText, { foreignKey: 'content_id' });\n\nsequelize.sync();\n"]}