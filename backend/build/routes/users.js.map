{"version":3,"sources":["../../src/routes/users.js"],"names":["upload","router","post","req","res","body","userInfo","app_metadata","userType","NonProfit","name","ein","address","city","state","zip","newNonProfit","nonProfitInfo","nonprofit","newUser","nonProfitID","String","dataValues","nonprofitId","createdUser","newUserData","data","error","statusCode","message","response","email","addNonProfitError","patch","single","accessToken","image","file","originalName","originalname","user","fileName","substring","lastIndexOf","Date","toISOString","public_id","folder","tags","uploadSuccess","user_id","user_metadata","picture","secure_url","editUserRes","status","editUserErr","uploadErr","findUserError","original","editData","updatedUserInfo","editUserResponse","updatedUser","updatedNonProfitInfo","updatedNonProfit","charAt","toUpperCase","slice","editNonProfitError","editUserError","userId"],"mappings":"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","file":"users.js","sourcesContent":["// Create API Users Router\nimport { Router } from 'express';\nimport multer from 'multer';\n\nimport { addNonProfit, editNonProfit } from '../models/nonprofits';\nimport { createNewUser, getUserInfo, editUserInfo } from '../models/Auth0';\nimport jsonResponse from '../helpers/response';\nimport { uploadProfileImage } from '../models/Cloudinary';\n\nconst upload = multer();\nconst router = Router();\n\n/*\n******USER ROUTES******\n*/\n\n// Accepts a new user information. Returns a confirmation message.\nrouter.post('/create', (req, res) => {\n  if (req.body.userInfo.app_metadata.userType === 'non-profit') {\n    const NonProfit = ({ name, ein, address, city, state, zip }) => ({\n      name,\n      ein,\n      address,\n      city,\n      state,\n      zip,\n    });\n    const newNonProfit = NonProfit(req.body.nonProfitInfo);\n    addNonProfit(\n      newNonProfit,\n      (nonprofit) => {\n        const newUser = req.body.userInfo;\n        newUser.app_metadata.nonProfitID = String(nonprofit.dataValues.nonprofitId);\n        createNewUser(\n          newUser,\n          (createdUser) => {\n            const newUserData = createdUser.data;\n            return jsonResponse(201, newUserData, 'Your user was successfully created.', res);\n          },\n          (error) => {\n            const { statusCode, message } = error.response.data;\n\n            return jsonResponse(statusCode, newUser.email, message, res);\n          },\n        );\n        // If user fails delete non-profit if new.\n      },\n      addNonProfitError => jsonResponse(500, addNonProfitError, 'There was an error adding the non-profit to the database.'),\n    );\n  } else {\n    const newUser = req.body.userInfo;\n    newUser.app_metadata.nonProfitID = '';\n    createNewUser(\n      newUser,\n      (createdUser) => {\n        const newUserData = createdUser.data;\n        return jsonResponse(201, newUserData, 'Your user was successfully created.', res);\n      },\n      (error) => {\n        const { statusCode, message } = error.response.data;\n\n        return jsonResponse(statusCode, { email: newUser.email }, message, res);\n      },\n    );\n  }\n});\n\nrouter.patch('/upload/photo', upload.single('file'), (req, res) => {\n  const { accessToken } = req.body;\n  const image = req.file;\n  const originalName = image.originalname;\n\n  getUserInfo(\n    accessToken,\n    (user) => {\n      const fileName = `${originalName.substring(0, originalName.lastIndexOf('.'))}-${user.email}-${(new Date()).toISOString()}`;\n      uploadProfileImage(\n        image,\n        {\n          public_id: fileName,\n          folder: `profile/${user.email}`,\n          tags: [user.email, 'profile-image'],\n        },\n        (uploadSuccess) => {\n          editUserInfo(\n            user.user_id,\n            { user_metadata: {\n              picture: uploadSuccess.secure_url,\n            } },\n            editUserRes => jsonResponse(\n              editUserRes.status,\n              { picture: editUserRes.data.user_metadata.picture },\n              'You have successfully uploaded the picture.',\n              res),\n            editUserErr => jsonResponse(\n              500,\n              editUserErr,\n              'There was an error uploading the user picture.',\n              res),\n          );\n        },\n        uploadErr => jsonResponse(\n          500,\n          uploadErr,\n          'There was an error uploading the user picture.',\n          res),\n      );\n      // editUserInfo(\n      //   user.user_id,\n      //   updatedUserInfo,\n      //   (editUserResponse) => {\n      //     const updatedUser = editUserResponse.data;\n      //     if (updatedUser.app_metadata.userType === 'non-profit') {\n      //       const nonprofitId = updatedUser.app_metadata.nonProfitID;\n      //       const updatedNonProfitInfo = editData.nonProfitInfo;\n\n      //       editNonProfit(\n      //         nonprofitId,\n      //         updatedNonProfitInfo,\n      //         updatedNonProfit => jsonResponse(\n      //           200,\n      //           {\n      //             updatedUser,\n      //             updatedNonProfit,\n      //           },\n      //           `${updatedUser.email.charAt(0).toUpperCase()}${updatedUser.email.slice(1)} has been updated.`,\n      //           res),\n      //         editNonProfitError => jsonResponse(\n      //           500,\n      //           { editNonProfitError },\n      //           'There was an error editing the nonprofit. Please contact support.',\n      //           res,\n      //         ),\n      //       );\n      //     }\n      //     return jsonResponse(\n      //       200,\n      //       { updatedUser },\n      //       `${updatedUser.email.charAt(0).toUpperCase()}${updatedUser.email.slice(1)} has been updated.`,\n      //       res);\n      //   },\n      //   editUserError => jsonResponse(\n      //     editUserError.response.status,\n      //     { userId: user.user_id },\n      //     editUserError.response.data.message,\n      //     res,\n      //   ),\n      // );\n    },\n    findUserError => jsonResponse(\n      findUserError.statusCode,\n      findUserError.original,\n      'This access token is not authorized.',\n      res),\n  );\n});\n\n// Accepts new information for the user with the userId param.\n// Returns the updated user information. Requires authorization.\nrouter.patch('/edit', (req, res) => {\n  const { accessToken, editData } = req.body;\n  const updatedUserInfo = editData.userInfo;\n\n  getUserInfo(\n    accessToken,\n    (user) => {\n      editUserInfo(\n        user.user_id,\n        updatedUserInfo,\n        (editUserResponse) => {\n          const updatedUser = editUserResponse.data;\n          if (updatedUser.app_metadata.userType === 'non-profit') {\n            const nonprofitId = updatedUser.app_metadata.nonProfitID;\n            const updatedNonProfitInfo = editData.nonProfitInfo;\n\n            editNonProfit(\n              nonprofitId,\n              updatedNonProfitInfo,\n              updatedNonProfit => jsonResponse(\n                200,\n                {\n                  updatedUser,\n                  updatedNonProfit,\n                },\n                `${updatedUser.email.charAt(0).toUpperCase()}${updatedUser.email.slice(1)} has been updated.`,\n                res),\n              editNonProfitError => jsonResponse(\n                500,\n                { editNonProfitError },\n                'There was an error editing the nonprofit. Please contact support.',\n                res,\n              ),\n            );\n          }\n          return jsonResponse(\n            200,\n            { updatedUser },\n            `${updatedUser.email.charAt(0).toUpperCase()}${updatedUser.email.slice(1)} has been updated.`,\n            res);\n        },\n        editUserError => jsonResponse(\n          editUserError.response.status,\n          { userId: user.user_id },\n          editUserError.response.data.message,\n          res,\n        ),\n      );\n    },\n    findUserError => jsonResponse(\n      findUserError.statusCode,\n      findUserError.original,\n      'This access token is not authorized.',\n      res),\n  );\n});\n\n// Exporting router as default.\nexport default router;\n"]}