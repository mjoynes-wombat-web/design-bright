{"version":3,"sources":["../../src/routes/users.js"],"names":["router","post","req","res","body","userInfo","app_metadata","userType","NonProfit","name","ein","address","city","state","zip","newNonProfit","nonProfitInfo","nonprofit","newUser","nonProfitID","String","dataValues","nonprofitId","createdUser","newUserData","data","error","statusCode","message","response","email","addNonProfitError","patch","accessToken","editData","updatedUserInfo","user","user_id","editUserResponse","updatedUser","updatedNonProfitInfo","updatedNonProfit","charAt","toUpperCase","slice","editNonProfitError","editUserError","status","userId","findUserError","original"],"mappings":"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","file":"users.js","sourcesContent":["// Create API Users Router\nimport { Router } from 'express';\n\nimport { addNonProfit, editNonProfit } from '../models/nonprofits';\nimport { createNewUser, getUserInfo, editUserInfo } from '../models/Auth0';\nimport jsonResponse from '../helpers/response';\n\nconst router = Router();\n\n/*\n******USER ROUTES******\n*/\n\n// Accepts a new user information. Returns a confirmation message.\nrouter.post('/create', (req, res) => {\n  if (req.body.userInfo.app_metadata.userType === 'non-profit') {\n    const NonProfit = ({ name, ein, address, city, state, zip }) => ({\n      name,\n      ein,\n      address,\n      city,\n      state,\n      zip,\n    });\n    const newNonProfit = NonProfit(req.body.nonProfitInfo);\n    addNonProfit(\n      newNonProfit,\n      (nonprofit) => {\n        const newUser = req.body.userInfo;\n        newUser.app_metadata.nonProfitID = String(nonprofit.dataValues.nonprofitId);\n        createNewUser(\n          newUser,\n          (createdUser) => {\n            const newUserData = createdUser.data;\n            return jsonResponse(201, newUserData, 'Your user was successfully created.', res);\n          },\n          (error) => {\n            const { statusCode, message } = error.response.data;\n\n            return jsonResponse(statusCode, newUser.email, message, res);\n          },\n        );\n        // If user fails delete non-profit if new.\n      },\n      addNonProfitError => jsonResponse(500, addNonProfitError, 'There was an error adding the non-profit to the database.'),\n    );\n  } else {\n    const newUser = req.body.userInfo;\n    newUser.app_metadata.nonProfitID = '';\n    createNewUser(\n      newUser,\n      (createdUser) => {\n        const newUserData = createdUser.data;\n        return jsonResponse(201, newUserData, 'Your user was successfully created.', res);\n      },\n      (error) => {\n        const { statusCode, message } = error.response.data;\n\n        return jsonResponse(statusCode, { email: newUser.email }, message, res);\n      },\n    );\n  }\n});\n\n// Accepts new information for the user with the userId param.\n// Returns the updated user information. Requires authorization.\nrouter.patch('/edit', (req, res) => {\n  const { accessToken, editData } = req.body;\n  const updatedUserInfo = editData.userInfo;\n\n  getUserInfo(\n    accessToken,\n    (user) => {\n      editUserInfo(\n        user.user_id,\n        updatedUserInfo,\n        (editUserResponse) => {\n          const updatedUser = editUserResponse.data;\n          if (updatedUser.app_metadata.userType === 'non-profit') {\n            const nonprofitId = updatedUser.app_metadata.nonProfitID;\n            const updatedNonProfitInfo = editData.nonProfitInfo;\n\n            editNonProfit(\n              nonprofitId,\n              updatedNonProfitInfo,\n              updatedNonProfit => jsonResponse(\n                200,\n                {\n                  updatedUser,\n                  updatedNonProfit,\n                },\n                `${updatedUser.email.charAt(0).toUpperCase()}${updatedUser.email.slice(1)} has been updated.`,\n                res),\n              editNonProfitError => jsonResponse(\n                500,\n                { editNonProfitError },\n                'There was an error editing the nonprofit. Please contact support.',\n                res,\n              ),\n            );\n          }\n          return jsonResponse(\n            200,\n            { updatedUser },\n            `${updatedUser.email.charAt(0).toUpperCase()}${updatedUser.email.slice(1)} has been updated.`,\n            res);\n        },\n        editUserError => jsonResponse(\n          editUserError.response.status,\n          { userId: user.user_id },\n          editUserError.response.data.message,\n          res,\n        ),\n      );\n    },\n    findUserError => jsonResponse(\n      findUserError.statusCode,\n      findUserError.original,\n      'This access token is not authorized.',\n      res),\n  );\n  // res.status(200).json(req.body);\n});\n\n// Exporting router as default.\nexport default router;\n"]}