{"version":3,"sources":["../../src/routes/campaigns.js"],"names":["CLOUDINARY_NAME","CLOUDINARY_KEY","CLOUDINARY_SECRET","config","parsed","cloud_name","api_key","api_secret","upload","router","get","req","res","Object","keys","query","length","search","sort","send","id","params","campaignId","results","error","patch","isNaN","post","single","campaignName","imageType","imageAlt","nonprofitId","body","image","file","imageDimensions","imgType","width","height","dimensions","originalName","originalname","fileName","substring","lastIndexOf","Date","toISOString","public_id","folder","tags","success","http_code","message"],"mappings":"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","file":"campaigns.js","sourcesContent":["// Create API Users Router\nimport { Router } from 'express';\nimport multer from 'multer';\n\nimport cloudinary from 'cloudinary';\nimport dotenv from 'dotenv';\n\nimport { getCampaignContent } from '../models/campaigns';\nimport jsonResponse from '../helpers/response';\nimport uploadImage from '../models/Cloudinary';\n\n\nconst { CLOUDINARY_NAME, CLOUDINARY_KEY, CLOUDINARY_SECRET } = dotenv.config().parsed;\n\ncloudinary.config({\n  cloud_name: CLOUDINARY_NAME,\n  api_key: CLOUDINARY_KEY,\n  api_secret: CLOUDINARY_SECRET,\n});\n\nconst upload = multer();\nconst router = Router();\n\n/*\n******CAMPAIGN ROUTES******\n*/\n\n// Returns the list of campaigns based on the search as sort queries.\nrouter.get('/', (req, res) => {\n  if (Object.keys(req.query).length > 0) {\n    const search = req.query.search;\n    const sort = req.query.sort;\n    if (sort && search) {\n      res.send(`\n        Returns campaigns filtered by ${search} and sorted by ${sort}.\n      `);\n    } else if (sort) {\n      res.send(`\n        Returns all campaigns sorted by ${sort}.\n      `);\n    } else if (search) {\n      res.send(`\n        Returns campaigns filtered by ${req.query.search}\n      `);\n    }\n  } else {\n    res.send('Returns all campaigns paginated.');\n  }\n});\n\n// Returns the information for the campaign with the identity param.\nrouter.get('/:campaignId', (req, res) => {\n  const id = req.params.campaignId;\n  getCampaignContent(\n    id,\n    results => jsonResponse(\n      200,\n      results,\n      `This is the content for the campaign id ${id}`,\n      res,\n    ),\n    error => jsonResponse(500,\n      error,\n      'There was an error on the server.',\n      res,\n    ),\n  );\n});\n\n// Accepts information changes to a campaign with the campaignId param.\n// Returns the update campaign information.\nrouter.patch('/:campaignId/edit', (req, res) => {\n  const id = req.params.campaignId;\n  if (!isNaN(id)) {\n    res.send(`\n    Accepts new information for the campaign with the id of ${id}.\n    Returns the newly updated campaign information for that campaign.\n  `);\n  } else {\n    res.send(`\n    You provided ${id} for an id but it is not a number. Please provide a number.\n    `);\n  }\n});\n\nrouter.post('/:campaignId/upload/photo', upload.single('file'), (req, res) => {\n  const id = req.params.campaignId;\n  const { campaignName, imageType, imageAlt, nonprofitId } = req.body;\n  const image = req.file;\n\n  const imageDimensions = (imgType) => {\n    switch (imgType) {\n      case 'main':\n        return { width: 1440, height: 820 };\n      case 'left':\n        return { width: 235, height: 290 };\n      case 'right':\n        return { width: 235, height: 290 };\n      default:\n        return { width: 235, height: 290 };\n    }\n  };\n\n  const dimensions = imageDimensions(imageType);\n  const originalName = image.originalname;\n  const fileName = `${originalName.substring(0, originalName.lastIndexOf('.'))}-campaignId${id}-${(new Date()).toISOString()}`;\n\n  uploadImage(\n    image,\n    {\n      public_id: fileName,\n      folder: nonprofitId,\n      ...dimensions,\n      tags: [id, 'campaign-image', campaignName, imageAlt],\n    },\n    success => jsonResponse(\n      200,\n      success,\n      'Image created successfully.',\n      res,\n    ),\n    error => jsonResponse(\n      error.http_code,\n      error,\n      error.message,\n      res,\n    ),\n  );\n});\n\n// Accepts a new campaign information. Returns the new created campaign.\nrouter.post('/create', (req, res) => {\n  res.send(`\n  Accepts a new campaign.\n  Returns the newly created campaign information for that campaign.\n  `);\n});\n\n// Exporting router as default.\nexport default router;\n"]}