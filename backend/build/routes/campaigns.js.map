{"version":3,"sources":["../../src/routes/campaigns.js"],"names":["CLOUDINARY_NAME","CLOUDINARY_KEY","CLOUDINARY_SECRET","config","parsed","cloud_name","api_key","api_secret","upload","router","get","req","res","Object","keys","query","length","search","sort","send","id","params","campaignId","results","campaignInfo","startDate","accessToken","user","parseInt","app_metadata","nonProfitID","nonprofitId","error","statusCode","original","patch","console","log","body","post","single","campaignName","imageType","imageAlt","image","file","imageDimensions","imgType","width","height","dimensions","originalName","originalname","fileName","substring","lastIndexOf","Date","toISOString","public_id","folder","tags","success","http_code","message","newCampaign"],"mappings":"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","file":"campaigns.js","sourcesContent":["// Create API Users Router\nimport { Router } from 'express';\nimport multer from 'multer';\n\nimport cloudinary from 'cloudinary';\nimport dotenv from 'dotenv';\n\nimport { getUserInfo } from '../models/Auth0';\nimport { getCampaignContent, createCampaign } from '../models/campaigns';\nimport jsonResponse from '../helpers/response';\nimport uploadImage from '../models/Cloudinary';\nimport requireAuth from '../helpers/requireAuth';\n\n\nconst { CLOUDINARY_NAME, CLOUDINARY_KEY, CLOUDINARY_SECRET } = dotenv.config().parsed;\n\ncloudinary.config({\n  cloud_name: CLOUDINARY_NAME,\n  api_key: CLOUDINARY_KEY,\n  api_secret: CLOUDINARY_SECRET,\n});\n\nconst upload = multer();\nconst router = Router();\n\n/*\n******CAMPAIGN ROUTES******\n*/\n\n// Returns the list of campaigns based on the search as sort queries.\nrouter.get('/', (req, res) => {\n  if (Object.keys(req.query).length > 0) {\n    const search = req.query.search;\n    const sort = req.query.sort;\n    if (sort && search) {\n      res.send(`\n        Returns campaigns filtered by ${search} and sorted by ${sort}.\n      `);\n    } else if (sort) {\n      res.send(`\n        Returns all campaigns sorted by ${sort}.\n      `);\n    } else if (search) {\n      res.send(`\n        Returns campaigns filtered by ${req.query.search}\n      `);\n    }\n  } else {\n    res.send('Returns all campaigns paginated.');\n  }\n});\n\n// Returns the information for the campaign with the identity param.\nrouter.get('/:campaignId', (req, res) => {\n  const id = req.params.campaignId;\n  getCampaignContent(\n    id,\n    (results) => {\n      if (results.campaignInfo.startDate) {\n        return jsonResponse(\n          200,\n          results,\n          `This is the contents for the campaign id ${id}`,\n          res,\n        );\n      } else if ('accessToken' in req.query) {\n        getUserInfo(\n          req.query.accessToken,\n          (user) => {\n            if (parseInt(user.app_metadata.nonProfitID, 10) === results.campaignInfo.nonprofitId) {\n              return jsonResponse(\n                200,\n                results,\n                `This is the preview contents for the the campaign id ${id}`,\n                res,\n              );\n            }\n            return jsonResponse(\n              401,\n              {},\n              `You aren't authorize to preview the campaign id ${id}`,\n              res,\n            );\n          },\n          error => jsonResponse(\n            error.statusCode,\n            error.original,\n            'There was an error getting the user info.',\n            res),\n        );\n      } else {\n        return jsonResponse(\n          401,\n          {},\n          'There was no access token provided.',\n          res,\n        );\n      }\n      return null;\n    },\n    (error) => {\n      if (Object.keys(error).length) {\n        return jsonResponse(\n          500,\n          error,\n          'There was an error on the server.',\n          res,\n        );\n      }\n      return jsonResponse(\n        404,\n        error,\n        'You are trying to access a campaign that doesn\\'t exist.',\n        res,\n      );\n    },\n  );\n});\n\n// Accepts information changes to a campaign with the campaignId param.\n// Returns the update campaign information.\nrouter.patch('/edit/:campaignId', (req, res) => {\n  const id = req.params.campaignId;\n  console.log(req.body);\n});\n\nrouter.post('/upload/photo/:campaignId', upload.single('file'), (req, res) => {\n  const id = req.params.campaignId;\n  const { campaignName, imageType, imageAlt, nonprofitId } = req.body;\n  const image = req.file;\n\n  const imageDimensions = (imgType) => {\n    switch (imgType) {\n      case 'main':\n        return { width: 1440, height: 820 };\n      case 'left':\n        return { width: 235, height: 290 };\n      case 'right':\n        return { width: 235, height: 290 };\n      default:\n        return { width: 235, height: 290 };\n    }\n  };\n\n  const dimensions = imageDimensions(imageType);\n  const originalName = image.originalname;\n  const fileName = `${originalName.substring(0, originalName.lastIndexOf('.'))}-campaignId${id}-${(new Date()).toISOString()}`;\n\n  uploadImage(\n    image,\n    {\n      public_id: fileName,\n      folder: nonprofitId,\n      ...dimensions,\n      tags: [id, 'campaign-image', campaignName, imageAlt],\n    },\n    success => jsonResponse(\n      200,\n      success,\n      'Image created successfully.',\n      res,\n    ),\n    error => jsonResponse(\n      error.http_code,\n      error,\n      error.message,\n      res,\n    ),\n  );\n});\n\n// Accepts a new campaign information. Returns the new created campaign.\nrouter.post('/create', (req, res) => {\n  const { newCampaign, accessToken } = req.body;\n  if (requireAuth(accessToken)) {\n    getUserInfo(\n      accessToken,\n      (user) => {\n        const nonprofitId = user.app_metadata.nonProfitID;\n\n        createCampaign(\n          nonprofitId,\n          newCampaign,\n          success => console.log(success),\n          error => console.log(error),\n        );\n      },\n      error => jsonResponse(\n        error.statusCode,\n        error.original,\n        'There was an error getting the user info.',\n        res),\n    );\n  } else {\n    jsonResponse(\n      401,\n      { accessToken },\n      'The access token is not a valid access token.',\n      res,\n    );\n  }\n});\n\n// Exporting router as default.\nexport default router;\n"]}